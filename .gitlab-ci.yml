variables:
    SONAR_PROJECT_KEY: vicuna-hexa-sharp
    SONAR_TOKEN_DEF: ${SONAR_TOKEN}
    SONAR_URL_DEF: ${SONAR_HOST_URL}

default:
  tags:
    - docker

image: mcr.microsoft.com/dotnet/sdk:9.0.101

stages:
  - build_vicuna
  - test_vicuna
  - owasp_check
  - security-scan
  - sonarqube

include:
  - local: testing.yml
    rules:
      - if: $CI_PIPELINE_SOURCE !~ "merge_request_event" && ( $CI_COMMIT_REF_SLUG == "main" ||  $CI_COMMIT_REF_SLUG == "develop")
        when: always

build_vicuna:
  allow_failure: true
  stage: build_vicuna
  tags:
    - docker
  image:
    name: mcr.microsoft.com/dotnet/sdk:9.0.101
  script:
    - echo "from Branch $CI_COMMIT_BRANCH"
    - "dotnet build vicuna-ddd.sln"

    
owasp_check:
  image:
    name: registry.gitlab.com/gitlab-ci-utils/docker-dependency-check:latest
    entrypoint: [""]
  stage: owasp_check
  tags:
    - docker
  script:
    # Job will scan the project root folder and fail if any vulnerabilities with CVSS > 0 are found
    - /usr/share/dependency-check/bin/dependency-check.sh --scan "./" --format ALL --project "$CI_PROJECT_NAME" --failOnCVSS 0
    # Dependency Check will only fail the job based on CVSS scores, and in some cases vulnerabilities do not
    # have CVSS scores (e.g. those from NPM audit), so they don't cause failure.  To fail for any vulnerabilities    
    # grep the resulting report for any "vulnerabilities" sections and exit if any are found (count > 0).
    - if [ $(grep -c "vulnerabilities" dependency-check-report.json) -gt 0 ]; then echo "Errors found, please check"; fi
  allow_failure: true
  artifacts:
    when: always
    paths:
      # Save the HTML and JSON report artifacts
      - "./dependency-check-report.html"
      - "./dependency-check-report.json"
     
sonarqube:
  allow_failure: true
  stage: sonarqube
  tags:
    - docker
  image:
    name: mcr.microsoft.com/dotnet/sdk:9.0.101
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
      - "dotnet tool install --global dotnet-sonarscanner"
      - "export PATH=\"$PATH:$HOME/.dotnet/tools\""
      - "dotnet sonarscanner begin /k:\"vicuna_hexa_csharp\" /d:sonar.token=\"$SONAR_TOKEN\" /d:\"sonar.host.url=$SONAR_HOST_URL\" "
      - "dotnet build"
      - "dotnet sonarscanner end /d:sonar.token=\"$SONAR_TOKEN\""
  only:
    - merge_requests
    - main
    - develop
  
#security-scan:
#    stage: security-scan
#    tags:
#      - docker 
#    allow_failure: true
#    image: mcr.microsoft.com/dotnet/sdk:6.0
#    script:
#      - "echo $env:Path"
#      - "dotnet tool install --global security-scan"
#      - "mkdir report"
#      - "/root/.dotnet/tools/security-scan build manage-id-wallet-cs/manage-id-wallet-cs.sln --excl-proj=**/*Test*/**; -**/docker**/** -export=report/out.sarif"
#    artifacts:
#      paths:
#        - ./build manage-id-wallet-cs/report

